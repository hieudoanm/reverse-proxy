plugins {
  // ‚úÖ Java plugin
  id 'java'
  // ‚úÖ CheckStyle
  id 'checkstyle'
  // ‚úÖ PMD
  id 'pmd'
  // ‚úÖ Spotless
  id 'com.diffplug.spotless' version '8.0.0'
  // ‚úÖ Quarkus
  id 'io.quarkus' version '3.28.5'
}

group = 'com.proxy.reverse'
version = '0.0.1-SNAPSHOT'
description = 'reverse-proxy'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

java {
  sourceCompatibility = JavaVersion.VERSION_21
  targetCompatibility = JavaVersion.VERSION_21
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

// üì¶ Gradle uses this as the package repository
repositories {
  mavenCentral()
}

dependencies {
  // RESTEasy Reactive (JAX-RS)
  implementation enforcedPlatform("io.quarkus.platform:quarkus-bom:3.28.5")

  // Vert.x HTTP + WebClient
  implementation 'io.quarkus:quarkus-arc'
  implementation 'io.quarkus:quarkus-resteasy-reactive'
  implementation 'io.quarkus:quarkus-vertx-http'

  // üåê Vert.x Mutiny Web Client (use Vert.x version aligned with Quarkus)
  implementation 'io.vertx:vertx-web-client:5.0.5'

  // SmallRye Mutiny bindings for the Vert.x Web Client (provides io.vertx.mutiny.ext.web.client.*)
  implementation 'io.smallrye.reactive:smallrye-mutiny-vertx-web-client:3.20.0'


  // Logging (already included by default)
  testImplementation 'io.quarkus:quarkus-junit5'
  testImplementation 'io.rest-assured:rest-assured'
}

// ‚úÖ Use JUnit Platform for tests
tasks.named('test') {
  useJUnitPlatform()
}

/**
 * -------------------------
 * Checkstyle Configuration
 * -------------------------
 */
checkstyle {
  toolVersion = '12.1.0' // Latest stable version
  config = resources.text.fromFile('config/checkstyle/checkstyle.xml')
  ignoreFailures = false  // Fail build if violations are found
}

tasks.withType(Checkstyle).configureEach {
  reports {
    xml.required = false
    html.required = true
    html.outputLocation = file("$buildDir/reports/checkstyle/checkstyle.html")
  }
}

/**
 * -------------------------
 * PMD Configuration
 * -------------------------
 */
pmd {
  toolVersion = '7.17.0' // Latest PMD version
  ruleSets = [] // We'll use a custom ruleset instead of defaults
  ruleSetFiles = files('config/pmd/pmd-ruleset.xml')
  ignoreFailures = true  // Fail build if PMD violations are found
}

tasks.withType(Pmd).configureEach {
  exclude "**/avro/**"
  reports {
    xml.required = false
    html.required = true
    html.outputLocation = file("$buildDir/reports/pmd/pmd.html")
  }
}

spotless {
  java {
    googleJavaFormat()  // auto-format according to Google Java Style
  }
}

// Enable dependency locking for reproducible builds
dependencyLocking {
  // Lock all configurations (implementation, testImplementation, etc.)
  lockAllConfigurations()
}
